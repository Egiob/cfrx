from typing import Dict

import jax.numpy as jnp
import numpy as np
import pyspiel
import pytest
from jaxtyping import Array
from open_spiel.python.algorithms.exploitability import (
    exploitability as open_spiel_exploitability_fn,
)
from open_spiel.python.algorithms.mccfr import AveragePolicy

from cfrx.envs.kuhn_poker.constants import (
    INFO_SETS,
    KUHN_UNIFORM_POLICY,
    get_kuhn_optimal_policy,
)
from cfrx.envs.kuhn_poker.env import KuhnPoker
from cfrx.metrics.exploitability import (
    compute_exploitability_value as cfrx_exploitability_fn,
)
from cfrx.policy import TabularPolicy


@pytest.mark.parametrize(
    "policy_dict",
    [
        get_kuhn_optimal_policy(alpha=0.0),
        KUHN_UNIFORM_POLICY,
        get_kuhn_optimal_policy(alpha=0.15),
    ],
)
def test_kuhn_exploitability_vs_open_spiel(policy_dict: Dict[str, Array]) -> None:
    info_states_dict = INFO_SETS
    default = np.ones_like(next(iter(policy_dict.values())))
    policy = np.stack([policy_dict.get(x, default) for x in info_states_dict])

    policy_obj = TabularPolicy(
        num_observations=policy.shape[0], num_actions=policy.shape[1]
    )
    # cfrx
    policy_jax = jnp.asarray(policy)
    num_max_nodes = 100
    env = KuhnPoker()
    num_players = 2
    cfrx_exploitability = cfrx_exploitability_fn(
        env,
        policy_params=policy_jax,
        num_players=num_players,
        num_max_nodes=num_max_nodes,
        policy=policy_obj,
    )

    # open_spiel
    game = pyspiel.load_game("kuhn_poker")
    average_probs = np.array(policy)
    average_probs = np.concatenate(
        [
            average_probs[:, 2:4].sum(axis=1, keepdims=True),
            average_probs[:, :2].sum(axis=1, keepdims=True),
        ],
        axis=1,
    )

    open_spiel_info_states = [[None, x] for x in average_probs]
    cfrx_to_open_spiel_info_states = dict(zip(INFO_SETS.keys(), open_spiel_info_states))
    print(cfrx_to_open_spiel_info_states)
    average_policy = AveragePolicy(
        game=game, player_ids=[0, 1], infostates=cfrx_to_open_spiel_info_states
    )
    open_spiel_exploitability = open_spiel_exploitability_fn(game, average_policy)

    assert np.allclose(cfrx_exploitability, open_spiel_exploitability, atol=1e-5)
